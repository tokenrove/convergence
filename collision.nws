% collision -- routines related to actor collision detection.
% Convergence
% Copyright Pureplay Games / 2002
%
% $Id: collision.nws,v 1.3 2002/11/22 11:56:46 tek Exp $


<<Files to include>>= 
	.include "sprite.inc"

<<IWRAM Variables>>= 
handler_list: .skip MAXSPRITES*4
.align

@ \section{{\tt collision\_init}}

[[collision_init]] -- wipes the collision handler list.

<<ARM Routines in ROM>>= 
	.global collision_init
collision_init:
	ldr r0, =handler_list
	mov r1, #MAXSPRITES
	mov r2, #0
0:	str r2, [r0], #4
	subs r1, r1, #1
	bne 0b
	bx lr

@ \section{{\tt collision_add}}

[[collision_add]] --- Adds this handle to the list.  Takes the handle
in {\bf r0} and the handler in {\bf r1}.

<<ARM Routines in ROM>>= 
	.global collision_add
collision_add:

#ifndef NDEBUG
	cmp r0, #MAXSPRITES	    @ assert(handle < MAXSPRITES)
	ldrge r0, =msg_idxoob
	bge abort
#endif

	ldr r2, =sprite_rt
	add r2, r2, r0, lsl #4
	ldrb r3, [r2, #SPRT_FLAGS]
	@ XXX assert that this sprite is enabled in the alloc_map

#ifndef NDEBUG
	tst r3, #SPRT_FLAG_COLLIDE  @ assert(collide flag not set)
	ldrne r0, =msg_already
	bne abort
#endif

	orr r3, r3, #SPRT_FLAG_COLLIDE
	strb r3, [r2, #SPRT_FLAGS]

	ldr r2, =handler_list
	str r1, [r2, r0, lsl #2]

	bx lr

@ \section{{\tt collision\_remove}}

[[collision_remove]]

<<ARM Routines in ROM>>= 
	.global collision_remove
collision_remove:

#ifndef NDEBUG
	cmp r0, #MAXSPRITES	    @ assert(handle < MAXSPRITES)
	ldrge r0, =msg_idxoob
	bge abort
#endif

	ldr r2, =sprite_rt
	add r2, r2, r0, lsl #4
	ldrb r3, [r2, #SPRT_FLAGS]
	@ XXX assert that this sprite is enabled in the alloc_map

#ifndef NDEBUG
	tst r3, #SPRT_FLAG_COLLIDE  @ assert(collide flag set)
	ldreq r0, =msg_notset
	beq abort
#endif

	bic r3, r3, #SPRT_FLAG_COLLIDE
	strb r3, [r2, #SPRT_FLAGS]

	ldr r1, =handler_list
	mov r2, #0
	str r2, [r1, r0, lsl #2]
	bx lr

@ \section{{\tt collision\_update}}

[[collision_update]] --- this walks the sprite allocation map looking
for sprites with the collision flag set.

<<ARM Routines in ROM>>= 
	.global collision_update
collision_update:
	stmfd sp!, {r4-r11,lr}

	ldr r0, =spr_alloc_map
	mov r2, #SPR_BITMAP_SIZE
	ldr r4, =sprite_rt
	mov r5, #0
 @ {
0:	ldr r1, [r0], #4
 @   {
1:	tst r1, #1
	beq 9f

	add r3, r4, r5, lsl #4
	ldrb r6, [r3, #SPRT_FLAGS]
	tst r6, #SPRT_FLAG_COLLIDE  @ skip it if it's not collidable
	beq 9f

	<<Load the current frame, get its size>>
	<<Convert its size into a radius>>

	stmfd sp!, {r0-r3}	    @ save outer loop information
	sub r0, r0, #4
	mov r3, r5
 @	{
2:	ldr r1, [r0], #4
 @	    {
3:	tst r1, #1
	beq 8f
	cmp r3, r5		    @ start idx+1 into the map
	ble 8f
	add r7, r4, r3, lsl #4 
	ldrb r6, [r7, #SPRT_FLAGS]
	tst r6, #SPRT_FLAG_COLLIDE  @ skip it if it's not collidable
	beq 8f

	@ check r3 against r5
	stmfd sp!, {r0-r3}	    @ save loop information

	@ Load the current frame, get its size
	ldrsh r6, [r7, #SPRT_X]
	ldrh r2, [r7, #SPRT_ANIMOFFSET]
	ldr r0, [r7, #SPRT_CONST]
	ldrb r7, [r7, #SPRT_Y]
	add r0, r0, r2
	ldrb r0, [r0, #1]	    @ size and palette
	mov r0, r0, lsr #4

	@ Convert its size into a radius squared
	ldr r2, =size2radius_xlat
	mov r0, r0, lsl #1
	ldrh r8, [r2, r0]
	ldr r2, =size2xoffs_xlat
	ldrh r1, [r2, r0]
	add r6, r6, r1
	ldr r2, =size2yoffs_xlat
	ldrh r1, [r2, r0]
	add r7, r7, r1

	<<Check for collision>>
	<<Call handlers>>

7:	ldmfd sp!, {r0-r3}	    @ restore loop information

8:	add r3, r3, #1
	movs r1, r1, lsr #1
	bne 3b
 @	    }
	add r3, r3, #31
	bic r3, r3, #31
	subs r2, r2, #1
	bne 2b
 @	}
	ldmfd sp!, {r0-r3}	    @ restore outer loop information

9:	add r5, r5, #1
	movs r1, r1, lsr #1
	bne 1b
 @   }
	add r5, r5, #31
	bic r5, r5, #31
	subs r2, r2, #1
	bne 0b
 @ }

	ldmfd sp!, {r4-r11,lr}
	bx lr

@ We get the actual hardware sprite value, used by the tables below.

<<Load the current frame, get its size>>= 
	ldrsh r9, [r3, #SPRT_X]
	ldrb r10, [r3, #SPRT_Y]
	ldrh r7, [r3, #SPRT_ANIMOFFSET]
	ldr r3, [r3, #SPRT_CONST]
	add r3, r3, r7
	ldrb r6, [r3, #1]	    @ size and palette
	mov r6, r6, lsr #4

@

<<Convert its size into a radius>>= 
	ldr r3, =size2radius_xlat
	mov r6, r6, lsl #1
	ldrh r11, [r3, r6]
	ldr r3, =size2xoffs_xlat
	ldrh r7, [r3, r6]
	add r9, r9, r7
	ldr r3, =size2yoffs_xlat
	ldrh r7, [r3, r6]
	add r10, r10, r7

@ This is based around the idea that given
	\[ d^2 = \Delta x^2 + \Delta y^2, \]
collision occurs if $d^2 \leq r^2 + r'^2$.

Note there is another approach to this described in my little black
book, which would be faster if the radii were larger than 6 bits or so.

<<Check for collision>>= 
	sub r0, r6, r9
	mul r1, r0, r0
	sub r0, r7, r10
	mla r1, r0, r0, r1
	add r0, r8, r11
	cmp r1, r0
	bgt 7f

@ The order of handlers being called is fairly arbitrary, so we hope
that no collision routines depend on being called before another.

<<Call handlers>>= 
	ldr r0, =handler_list
	ldr r2, [r0, r3, lsl #2]
	cmp r2, #0
	beq 6f
	stmfd sp!, {r0-r3}
	mov r0, r3
	mov r1, r5
	mov lr, pc
	mov pc, r2
	ldmfd sp!, {r0-r3}

6:	ldr r2, [r0, r5, lsl #2]
	cmp r2, #0
	beq 7f
	mov r0, r5
	mov r1, r3
	mov lr, pc
	mov pc, r2

@ \section{Supporting Data}

NOTE: This table can be substituted for the one below it, to give
significantly looser collisions.

<<Read-only data>>= 
 @size2radius_xlat: .short 16, 64, 256, 1024, 64, 256, 256, 1024
 @                  .short 16, 16, 64, 256, 0,0,0,0

size2radius_xlat: .short 8, 32, 128, 512, 32, 128, 128, 512
                  .short 8, 8, 32, 128, 0,0,0,0

@ These other two tables are basically quick offset hacks to put the
collision circle around the center of the sprite based on its sprite
size.

<<Read-only data>>= 
size2xoffs_xlat: .short 4, 8, 16, 32, 8, 16, 16, 32
                 .short 4, 4, 8, 16, 0,0,0,0

size2yoffs_xlat: .short 4, 8, 16, 32, 4, 4, 8, 16
                 .short 8, 16, 16, 32, 0,0,0,0

@ The usual set of debug messages.

<<Read-only data>>= 
msg_idxoob: .string "collision: idx oob!"
msg_already: .string "collision: already used!"
msg_notset: .string "collision: not set!"
@

% EOF collision.nws
