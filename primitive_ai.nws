% primitive_ai -- Simple AI handlers.
% Convergence
% Copyright Pureplay Games / 2002
%
% $Id: primitive_ai.nws,v 1.14 2002/12/12 19:38:21 tek Exp $

<<Files to include>>= 
	.include "actor.inc"
	.include "sprite.inc"
	.include "game.inc"
        .include "physics.inc"

@ \section{Beast}

[[ai_beast(actor)]]
Actually just sets blend bits at the moment.

<<ARM Routines in ROM>>= 
	.global ai_beast
ai_beast:
        stmfd sp!, {lr}

        ldrb r1, [r0, #ACTRT_NPARTS]
        ldr r3, [r0, #ACTRT_PARTSPTR]

0:      ldrb r2, [r3]
        cmp r2, #0xff               @ ignore the sprite if inactive.
        beq 1f

        stmfd sp!, {r0-r3}
	ldr r0, =sprite_rt
	add r0, r0, r2, lsl #4
	ldrb r1, [r0, #SPRT_ANIMIDX]
	orr r1, r1, #0x80
	strb r1, [r0, #SPRT_ANIMIDX]
        ldmfd sp!, {r0-r3}

        stmfd sp!, {r0-r3}
	mov r0, r2
	ldr r1, =cur_world
	ldrb r1, [r1]
	cmp r1, #0
	moveq r1, #PAL_BETA
	movne r1, #PAL_ALPHA
	bl sprite_setpalette
        ldmfd sp!, {r0-r3}

1:      add r3, r3, #4
        subs r1, r1, #1
        bne 0b

        ldmfd sp!, {lr}
	bx lr

@ \section{Orb}

[[ai_orb(actor)]] ---
Sets up the appropriate palette only.

<<ARM Routines in ROM>>= 
	.global ai_orb
ai_orb:
        stmfd sp!, {lr}

        ldrb r1, [r0, #ACTRT_NPARTS]
        ldr r3, [r0, #ACTRT_PARTSPTR]

0:      ldrb r2, [r3]
        cmp r2, #0xff               @ ignore the sprite if inactive.
        beq 1f

        stmfd sp!, {r0-r3}
	mov r0, r2
	ldr r1, =cur_world
	ldrb r1, [r1]
	cmp r1, #0
	moveq r1, #PAL_BETA
	movne r1, #PAL_ALPHA
	bl sprite_setpalette
        ldmfd sp!, {r0-r3}

1:      add r3, r3, #4
        subs r1, r1, #1
        bne 0b

        ldmfd sp!, {lr}
	bx lr

@ Orb collision just checks if the collidee is a phasic actor, and gives
them balance if so (destroying itself in the process).  I'm sure we also
want to play a soundeffect of some sort here.

<<ARM Routines in ROM>>= 
	.global collide_orb
collide_orb:
	stmfd sp!, {lr}

	ldr r2, =actor_sprite_lut
	ldrb r2, [r2, r1]
	cmp r2, #0xff
	beq 9f

	ldr r3, =actor_rt
	add r2, r3, r2, lsl #5
	ldrh r3, [r2, #ACTRT_TYPE]
	<<Check if this actor is phasic>>

	ldr r1, =actor_sprite_lut
	ldrb r0, [r1, r0]
	<<Get orb health value>>

	ldrsb r3, [r2, #ACTRT_HEALTH]
	cmp r3, #0
	blt 1f

	subs r3, r3, r1
	movlt r3, #0
	bal 2f
1:	adds r3, r3, r1
	movgt r3, #0

2:	strb r3, [r2, #ACTRT_HEALTH]
	bl actor_remove

9:	ldmfd sp!, {lr}
	bx lr

@ We peek into the first part of this archetype to see if this actor
uses a balance meter or a health meter, which indicates whether or not
they can pick up an orb.

<<Check if this actor is phasic>>= 
	ldr r1, =archetype_table
	mov r3, r3, lsl #1
	ldrh r3, [r1, r3]
	add r1, r1, r3, lsl #2
	ldrb r3, [r1, #13]
	tst r3, #1<<7
	beq 9f

@ Seeing as the orb is otherwise indestructible, we use its health value
as the amount we gain back.  Originally we loaded this from the
archetype, etc etc, but then I realized that the same value should
always be in the [[ACTRT_HEALTH]] member.

<<Get orb health value>>= 
	ldr r1, =actor_rt
	add r1, r1, r0, lsl #5
	ldrb r1, [r1, #ACTRT_HEALTH]

@ \section{Steve}

Steve's state is currently just a byte representing his angle of
rotation.

<<Constants>>= 
.equ STEVEST_THETA, 0
.equ STEVEST_COUNTER, 1
@

<<ARM Routines in ROM>>= 
	.global ai_steve
ai_steve:
	stmfd sp!, {lr}
	ldr r1, [r0, #ACTRT_STATE]
	ldrb r2, [r1, #STEVEST_COUNTER]
	add r2, r2, #1
	cmp r2, #5
	movge r2, #0
	strb r2, [r1, #STEVEST_COUNTER]
	blt 9f
	ldrb r2, [r1, #STEVEST_THETA]
	add r2, r2, #1
	strb r2, [r1, #STEVEST_THETA]

	ldr r3, [r0, #ACTRT_PARTSPTR]
	add r3, r3, #4
	ldrb r3, [r3]
	cmp r3, #0xff
	beq 9f
	ldr r1, =sprite_rt
	add r1, r1, r3, lsl #4
	ldrb r0, [r1, #SPRT_XFLAGS]
	tst r0, #0x40
	bne 1f

	stmfd sp!, {r1,r2}
	bl rotfield_alloc
	ldmfd sp!, {r1,r2}
	orr r0, r0, #0x40
	strb r0, [r1, #SPRT_XFLAGS]

1:	ldr r1, =sprite_rotfields
	and r0, r0, #31
	add r1, r1, r0, lsl #3

	ldr r3, =sine_lut
	mov r2, r2, lsl #1
	ldrsh r0, [r3, r2]
	mov r0, r0, lsr #4
	strh r0, [r1, #2]
	rsb r0, r0, #0
	strh r0, [r1, #4]
	add r2, r2, #128
	mov r0, #0xff
	and r2, r2, r0, lsl #1
	ldrsh r0, [r3, r2]
	mov r0, r0, lsr #4
	strh r0, [r1]
	strh r0, [r1, #6]
9:	ldmfd sp!, {pc}

@ Steve's offset function positions his rotating body relative to his
gun.

<<ARM Routines in ROM>>= 
	.global offset_steve
offset_steve:
	mov r1, #0
	mov r2, #0
	ldr r3, [r0, #ACTRT_PARTSPTR]
	add r3, r3, #4
	sub r1, r1, #20
	sub r2, r2, #24
	strb r1, [r3, #2]
	strb r2, [r3, #3]
	bx lr

@ \section{Brad}

The [[brad_the_crow]] routine is the human handler for the crow, which
has a more shooter-like physics.

<<Files to include>>= 
	.include "gba.inc"
<<Constants>>= 
.equ CROW_XSPEED, 64
.equ CROW_YSPEED, 32
<<ARM Routines in ROM>>= 
	.global brad_the_crow
brad_the_crow:
	ldr r1, =REG_KEY
	ldrh r1, [r1]

	tst r1, #KEY_LEFT
	bne 1f

	ldrb r2, [r0, #ACTRT_FLAGS]
	orr r2, r2, #ACTRT_FLAG_FACING
	strb r2, [r0, #ACTRT_FLAGS]

	mov r2, #CROW_XSPEED
	rsb r2, r2, #0
	strh r2, [r0, #ACTRT_AX]
	bal 2f

1:	tst r1, #KEY_RIGHT
	bne 1f

	ldrb r2, [r0, #ACTRT_FLAGS]
	bic r2, r2, #ACTRT_FLAG_FACING
	strb r2, [r0, #ACTRT_FLAGS]

	mov r2, #CROW_XSPEED
	strh r2, [r0, #ACTRT_AX]
	bal 2f

1:	mov r2, #0
	strh r2, [r0, #ACTRT_AX]

2:	tst r1, #KEY_UP
	bne 1f

	mov r2, #CROW_YSPEED
	rsb r2, r2, #0
	strh r2, [r0, #ACTRT_AY]
	bal 2f

1:	tst r1, #KEY_DOWN
	bne 1f

	mov r2, #CROW_YSPEED
	strh r2, [r0, #ACTRT_AY]
	bal 2f

1:	mov r2, #0
	strh r2, [r0, #ACTRT_AY]

2:	tst r1, #KEY_TRIGGER_L
	bne 1f

	ldrb r2, [r0, #ACTRT_FLAGS]
	orr r2, r2, #ACTRT_FLAG_WORLD_ALPHA
	bic r2, r2, #ACTRT_FLAG_WORLD_BETA
	strb r2, [r0, #ACTRT_FLAGS]

	ldr r2, =desired_world
	ldrb r3, [r2]
	cmp r3, #0
	mov r3, #0
	strb r3, [r2]
	beq 1f

	ldr r3, =actor_segs
	ldrb r2, [r0, #ACTRT_IDX]
	add r3, r3, r2, lsl #2
	mov r2, #0
	strh r2, [r3, #ACTSEG_FLOOR]
	strh r2, [r3, #ACTSEG_WALL]

1:	tst r1, #KEY_TRIGGER_R
	bne 1f

	ldrb r2, [r0, #ACTRT_FLAGS]
	bic r2, r2, #ACTRT_FLAG_WORLD_ALPHA
	orr r2, r2, #ACTRT_FLAG_WORLD_BETA
	strb r2, [r0, #ACTRT_FLAGS]

	ldr r2, =desired_world
	ldrb r3, [r2]
	cmp r3, #1
	mov r3, #1
	strb r3, [r2]
	beq 1f

	ldr r3, =actor_segs
	ldrb r2, [r0, #ACTRT_IDX]
	add r3, r3, r2, lsl #2
	mov r2, #0
	strh r2, [r3, #ACTSEG_FLOOR]
	strh r2, [r3, #ACTSEG_WALL]

1:	bx lr

@ \section{Misc}

Here's a very primitive damage handler.

<<ARM Routines in ROM>>= 
	@ damage_dumb(actorid_t cause, damage_t type, actor_t us, int magnitude)
	@ {us} must always be valid, {cause} may be 0xff
	.global damage_dumb
damage_dumb:
	stmfd sp!, {r4,lr}
	ldrb r4, [r2, #ACTRT_HEALTH]
	subs r4, r4, r3
	movlt r4, #0
	strb r4, [r2, #ACTRT_HEALTH]
	ldrb r4, [r2, #ACTRT_FLAGS]
	bicle r4, r4, #ACTRT_FLAG_ALIVE
	strb r4, [r2, #ACTRT_FLAGS]

        @ make some noise
        mov r0, #3
        mov r1, #0
        ldr r2, =0x408
        bl music_play_sfx
	ldmfd sp!, {r4,lr}
	bx lr

@
[[ai_vortex(actor)]] ---
Much like [[ai_beast]] save that it also warps the screen when it's
visible. XXX well not quite yet -- have to figure out a good way to have
the hblank stuff managed.

<<ARM Routines in ROM>>= 
	.global ai_vortex
ai_vortex:
        stmfd sp!, {lr}

        ldrb r1, [r0, #ACTRT_NPARTS]
        ldr r3, [r0, #ACTRT_PARTSPTR]

	ldrb r2, [r3]
        cmp r2, #0xff               @ ignore the sprite if inactive.
        beq 1f

        stmfd sp!, {r0-r3}
	ldr r0, =sprite_rt
	add r0, r0, r2, lsl #4
	ldrb r1, [r0, #SPRT_ANIMIDX]
	orr r1, r1, #0x80
	strb r1, [r0, #SPRT_ANIMIDX]

	@ldrh r1, [r0, #SPRT_Y]
	@mov r0, r1
	@add r1, r1, #64
	@mov r2, #0
	@mov r3, #1
	@bl hblank_init
        ldmfd sp!, {r0-r3}

        stmfd sp!, {r0-r3}
	mov r0, r2
	ldr r1, =cur_world
	ldrb r1, [r1]
	cmp r1, #0
	moveq r1, #PAL_BETA
	movne r1, #PAL_ALPHA
	bl sprite_setpalette
        ldmfd sp!, {r0-r3}

	bal 9f

1:

9:      ldmfd sp!, {lr}
	bx lr
@

[[ai_miller(actor)]]

Causes the actor to pace back and forth on whatever floor they're on (as
long as they're on a floor).  They will walk off ledges, but they turn
around when they hit walls.

Are we on a floor?  Exit if so.  Surely we'll hit ground soon enough.
Otherwise, check if we're hitting a wall.  If we are, we want to reset
our horizontal velocity, and turn around, otherwise we want to walk in
the direction we're facing.

<<ARM Routines in ROM>>= 
	.global ai_miller
ai_miller:
	stmfd sp!, {lr}

	<<Check our pulse>>

	ldr r2, =actor_segs
	ldrb r1, [r0, #ACTRT_IDX]
	add r2, r2, r1, lsl #2
	ldrh r1, [r2, #ACTSEG_FLOOR]
	cmp r1, #0
	beq 9f

	@ are we colliding with a wall?
	ldr r2, =actor_segs
	ldrb r1, [r0, #ACTRT_IDX]
	add r2, r2, r1, lsl #2
	ldrh r1, [r2, #ACTSEG_WALL]
	cmp r1, #0
	beq 1f

	mov r2, #0
	strh r2, [r0, #ACTRT_VX]
	strh r2, [r0, #ACTRT_AX]
	ldrb r1, [r0, #ACTRT_FLAGS]
	eor r1, r1, #ACTRT_FLAG_FACING
	strb r1, [r0, #ACTRT_FLAGS]

1:	ldrb r1, [r0, #ACTRT_FLAGS]
	tst r1, #ACTRT_FLAG_FACING
	mov r2, #64
	rsbne r2, r2, #0
	strh r2, [r0, #ACTRT_AX]

9:	ldmfd sp!, {lr}
	bx lr

@ If we discover that we have somehow died, we just remove ourselves.
No point belaboring the fact.  (actually, secretly, we want to spawn an
explosion ephemeral...)

<<Check our pulse>>= 
	ldrb r1, [r0, #ACTRT_FLAGS]
	tst r1, #ACTRT_FLAG_ALIVE
	bne 1f

	stmfd sp!, {r0,r4}
	ldrb r2, [r0, #ACTRT_IDX]
	ldrb r4, [r0, #ACTRT_FLAGS]
	tst r4, #ACTRT_FLAG_WORLD_ALPHA
	moveq r4, #PAL_ALPHA
	movne r4, #PAL_BETA
	ldr r0, =vaporize_spr
	mov r1, #0
	mov r3, #23
	bl ephemeral_spawn
	ldmfd sp!, {r0,r4}

	stmfd sp!, {r0}
	bl remove_parts
	ldmfd sp!, {r0}
	ldrb r0, [r0, #ACTRT_IDX]
	bl actor_remove
	bal 9f

1:
@

<<ARM Routines in ROM>>= 
        .global glitter_kid_handler
glitter_kid_handler:
        stmfd sp!, {lr}

	<<Check our pulse>>

	ldr r2, =actor_segs
	ldrb r1, [r0, #ACTRT_IDX]
	add r2, r2, r1, lsl #2
	ldrh r1, [r2, #ACTSEG_FLOOR]
	cmp r1, #0
	beq 9f

	@ are we colliding with a wall?
	ldr r2, =actor_segs
	ldrb r1, [r0, #ACTRT_IDX]
	add r2, r2, r1, lsl #2
	ldrh r1, [r2, #ACTSEG_WALL]
	cmp r1, #0
	beq 1f

	mov r2, #0
	strh r2, [r0, #ACTRT_VX]
	strh r2, [r0, #ACTRT_AX]
	ldrb r1, [r0, #ACTRT_FLAGS]
	eor r1, r1, #ACTRT_FLAG_FACING
	strb r1, [r0, #ACTRT_FLAGS]

        mov r0, #CHAN_PCM1
        mov r1, #0
        ldr r2, =0x10d0
        bl music_play_sfx

1:	ldrb r1, [r0, #ACTRT_FLAGS]
	tst r1, #ACTRT_FLAG_FACING
	mov r2, #64
	rsbne r2, r2, #0
	strh r2, [r0, #ACTRT_AX]

9:	ldmfd sp!, {lr}
        bx lr

@ Ronald's collider.

<<Constants>>= 
.equ RONALD_DAMAGE, 12
<<ARM Routines in ROM>>= 
	.global ronald_collider
ronald_collider:
	stmfd sp!, {r4,r5,lr}
	@ if the other sprite is worthy of damage, call their damage
	@ handler.
	ldr r2, =actor_sprite_lut
	ldrb r3, [r2, r1]
	cmp r3, #0xff
	beq 9f
	cmp r3, r0
	beq 9f

	ldr r2, =actor_rt
	add r2, r2, r3, lsl #5
	ldrh r1, [r2, #ACTRT_TYPE]
	ldr r3, =archetype_table
	mov r1, r1, lsl #1
	ldrh r1, [r3, r1]
	add r3, r3, r1, lsl #2
	add r3, r3, #7
	ldrb r1, [r3], #1
	add r3, r3, r1, lsl #3
	ldr r4, [r3, #16]
	cmp r4, #0
	beq 9f

	@ r0 is our master's actor id,
	@ r2 is the actor _rt_ of the damned
	mov r1, #DAMAGE_BLUDGEON
	mov r3, #RONALD_DAMAGE
	mov lr, pc
	mov pc, r4

9:	ldmfd sp!, {r4,r5,lr}
	bx lr

@ \section{Stretcher}

Stretcher handler just checks whether it is on screen and whether its
dynamic segment is registered, and updates the state of the dynamic
segment as appropriate.

<<ARM Routines in ROM>>= 
        .global stretcher_update
stretcher_update:
        stmfd sp!, {r4,lr}

        mov r4, r0
        ldr r1, [r4, #ACTRT_STATE]
        ldr r2, [r4, #ACTRT_PARTSPTR]
        ldrb r2, [r2]
        cmp r2, #0xff
        beq 4f

        @ add the line if not present
        ldrh r0, [r1]
        cmp r0, #0
        bne 3f

        ldr r0, =stretcher_dynseg_update
        mov r1, r4
        bl physics_dynseg_add
        ldr r1, [r4, #ACTRT_STATE]
        strh r0, [r1]

        @ fill the segment with appropriate data
3:      ldr r1, =linebank
        ldr r1, [r1]
        add r0, r0, r0, lsl #1
        add r1, r1, r0, lsl #2
        ldrh r2, [r4, #ACTRT_X]
        strh r2, [r1, #SEGRT_X1]
        add r2, r2, #32
        strh r2, [r1, #SEGRT_X2]
        ldrh r2, [r4, #ACTRT_Y]
        strh r2, [r1, #SEGRT_Y1]
        strh r2, [r1, #SEGRT_Y2]
        mov r2, #96
        strb r2, [r1, #SEGRT_FRICTION]
        ldrb r2, [r4, #ACTRT_FLAGS]
        mov r2, r2, lsl #5
        bic r2, r2, #0x3F
        orr r2, r2, #SEGTYPE_FLAG_PASS
        strb r2, [r1, #SEGRT_TYPE]
        bal 9f

4:      @ remove the line if present
        ldrh r0, [r1]
        cmp r0, #0
        beq 9f

        bl physics_dynseg_remove
        mov r0, #0
        ldr r1, [r4, #ACTRT_STATE]
        strh r0, [r1]

9:      ldmfd sp!, {r4,pc}

@ The stretcher collider fakes physics as much as it can for whoever
withwhom it collides.  If the actor colliding with us has our segment as
their floor, we move them with us, otherwise we act as if it were a
collision.

First, we find our own actor structure, so we can know our own position.
Then, we get their actor structure.  If they aren't an actor, we ignore
them.

<<ARM Routines in ROM>>= 
        .global stretcher_collider
stretcher_collider:
        stmfd sp!, {lr}
        ldr r2, =actor_sprite_lut
        ldrb r3, [r2, r0]
        cmp r3, #0xff
        beq abort_lr                @ should never happen
        ldr r0, =actor_rt
        add r0, r0, r3, lsl #5

        ldrb r3, [r2, r1]
        cmp r3, #0xff
        beq 9f                      @ ignore 'em

        ldr r1, =actor_rt
        add r1, r1, r3, lsl #5

        ldr r2, =actor_segs
        add r2, r2, r3, lsl #2
        ldrh r3, [r2, #ACTSEG_FLOOR]
        ldr r2, [r0, #ACTRT_STATE]
        ldrh r2, [r2]
        cmp r2, r3
        beq 9f

        ldrsh r2, [r1, #ACTRT_VX]
        strh r2, [r0, #ACTRT_VX]

9:      ldmfd sp!, {pc}

@ Called for any actor who has our segment as their floor.

<<ARM Routines in ROM>>= 
        .global stretcher_dynseg_update
stretcher_dynseg_update:
        ldrsh r2, [r0, #ACTRT_VX]
        ldrsh r3, [r1, #ACTRT_VX]
        add r2, r2, r3
        strh r2, [r1, #ACTRT_VX]

        bx lr


@ \section{Platform}

<<Constants>>= 
.equ PLATST_TOP, 0
.equ PLATST_LEFT, 2
.equ PLATST_RIGHT, 4
.equ PLATST_BOTTOM, 6
@

Platform handler first moves us up or down, and then checks whether it
is on screen and whether its four dynamic segments are registered, and
updates the state of the dynamic segment as appropriate.

We use the actor's health value to keep track of how much variation in
height this platform should have.

<<ARM Routines in ROM>>= 
        .global platform_handler
platform_handler:
        stmfd sp!, {r4,lr}

        mov r4, r0

        @ Move up and down
        ldrh r0, [r4, #ACTRT_TYPE]
        ldr r1, =archetype_table
        mov r0, r0, lsl #1
        ldrh r0, [r1, r0]
        add r1, r1, r0, lsl #2
        ldr r2, =difficulty_level
        ldrb r2, [r2]
        add r2, r2, #4
        ldrb r1, [r1, r2]
        mov r1, r1, lsl #2
        mov r2, #32
        ldrb r3, [r4, #ACTRT_FLAGS]
        ldrsb r0, [r4, #ACTRT_HEALTH]
        tst r3, #ACTRT_FLAG_SLOPESELECTION
        bne 1f
        
        sub r0, r0, #1
        rsb r1, r1, #0
        cmp r0, r1
        orrlt r3, r3, #ACTRT_FLAG_SLOPESELECTION
        strltb r3, [r4, #ACTRT_FLAGS]
        rsb r2, r2, #0
        sub r2, r2, #GRAVITY
        bal 2f

1:      add r0, r0, #1
        cmp r0, r1
        bicge r3, r3, #ACTRT_FLAG_SLOPESELECTION
        strgeb r3, [r4, #ACTRT_FLAGS]

2:      strh r2, [r4, #ACTRT_VY]
        strb r0, [r4, #ACTRT_HEALTH]

3:
        @ Deal with dynsegs
        ldr r1, [r4, #ACTRT_STATE]
        ldr r2, [r4, #ACTRT_PARTSPTR]
        ldrb r2, [r2]
        cmp r2, #0xff
        beq 4f

        @ add each line if not present
        ldrh r0, [r1, #PLATST_TOP]
        cmp r0, #0
        bne 3f

        ldr r0, =platform_dynseg_update
        mov r1, r4
        bl physics_dynseg_add
        ldr r1, [r4, #ACTRT_STATE]
        strh r0, [r1, #PLATST_TOP]

        @ fill the segment with appropriate data
3:      ldr r1, =linebank
        ldr r1, [r1]
        add r0, r0, r0, lsl #1
        add r1, r1, r0, lsl #2
        ldrh r2, [r4, #ACTRT_X]
        strh r2, [r1, #SEGRT_X1]
        add r2, r2, #32
        strh r2, [r1, #SEGRT_X2]
        ldrh r2, [r4, #ACTRT_Y]
        strh r2, [r1, #SEGRT_Y1]
        strh r2, [r1, #SEGRT_Y2]
        mov r2, #96
        strb r2, [r1, #SEGRT_FRICTION]
        ldrb r2, [r4, #ACTRT_FLAGS]
        mov r2, r2, lsl #5
        bic r2, r2, #0x3F
        orr r2, r2, #SEGTYPE_FLAG_PASS
        strb r2, [r1, #SEGRT_TYPE]

        @ Left side
        ldr r1, [r4, #ACTRT_STATE]
        ldrh r0, [r1, #PLATST_LEFT]
        cmp r0, #0
        bne 3f

        mov r0, #0
        mov r1, #0
        bl physics_dynseg_add
        ldr r1, [r4, #ACTRT_STATE]
        strh r0, [r1, #PLATST_LEFT]

        @ fill the segment with appropriate data
3:      ldr r1, =linebank
        ldr r1, [r1]
        add r0, r0, r0, lsl #1
        add r1, r1, r0, lsl #2
        ldrh r2, [r4, #ACTRT_X]
        strh r2, [r1, #SEGRT_X1]
        strh r2, [r1, #SEGRT_X2]
        ldrh r2, [r4, #ACTRT_Y]
        strh r2, [r1, #SEGRT_Y1]
        add r2, r2, #8
        strh r2, [r1, #SEGRT_Y2]
        mov r2, #64
        strb r2, [r1, #SEGRT_FRICTION]
        ldrb r2, [r4, #ACTRT_FLAGS]
        mov r2, r2, lsl #5
        bic r2, r2, #0x3F
        strb r2, [r1, #SEGRT_TYPE]

        @ Bottom
        ldr r1, [r4, #ACTRT_STATE]
        ldrh r0, [r1, #PLATST_BOTTOM]
        cmp r0, #0
        bne 3f

        mov r0, #0
        mov r1, #0
        bl physics_dynseg_add
        ldr r1, [r4, #ACTRT_STATE]
        strh r0, [r1, #PLATST_BOTTOM]

        @ fill the segment with appropriate data
3:      ldr r1, =linebank
        ldr r1, [r1]
        add r0, r0, r0, lsl #1
        add r1, r1, r0, lsl #2
        ldrh r2, [r4, #ACTRT_X]
        strh r2, [r1, #SEGRT_X1]
        add r2, r2, #32
        strh r2, [r1, #SEGRT_X2]
        ldrh r2, [r4, #ACTRT_Y]
        add r2, r2, #8
        strh r2, [r1, #SEGRT_Y1]
        strh r2, [r1, #SEGRT_Y2]
        mov r2, #96
        strb r2, [r1, #SEGRT_FRICTION]
        ldrb r2, [r4, #ACTRT_FLAGS]
        mov r2, r2, lsl #5
        bic r2, r2, #0x3F
        orr r2, r2, #SEGTYPE_FLAG_PASS
        orr r2, r2, #SEGTYPE_FLAG_Y
        orr r2, r2, #SEGTYPE_FLAG_X
        strb r2, [r1, #SEGRT_TYPE]

        @ Right
        ldr r1, [r4, #ACTRT_STATE]
        ldrh r0, [r1, #PLATST_RIGHT]
        cmp r0, #0
        bne 3f

        mov r0, #0
        mov r1, #0
        bl physics_dynseg_add
        ldr r1, [r4, #ACTRT_STATE]
        strh r0, [r1, #PLATST_RIGHT]

        @ fill the segment with appropriate data
3:      ldr r1, =linebank
        ldr r1, [r1]
        add r0, r0, r0, lsl #1
        add r1, r1, r0, lsl #2
        ldrh r2, [r4, #ACTRT_X]
        add r2, r2, #32
        strh r2, [r1, #SEGRT_X1]
        strh r2, [r1, #SEGRT_X2]
        ldrh r2, [r4, #ACTRT_Y]
        strh r2, [r1, #SEGRT_Y1]
        add r2, r2, #8
        strh r2, [r1, #SEGRT_Y2]
        mov r2, #64
        strb r2, [r1, #SEGRT_FRICTION]
        ldrb r2, [r4, #ACTRT_FLAGS]
        mov r2, r2, lsl #5
        bic r2, r2, #0x3F
        orr r2, r2, #SEGTYPE_FLAG_X
        strb r2, [r1, #SEGRT_TYPE]

        bal 9f

4:      @ remove the lines if present
        ldrh r0, [r1, #PLATST_TOP]
        cmp r0, #0
        beq 4f

        bl physics_dynseg_remove
        mov r0, #0
        ldr r1, [r4, #ACTRT_STATE]
        strh r0, [r1, #PLATST_TOP]

4:      ldrh r0, [r1, #PLATST_LEFT]
        cmp r0, #0
        beq 4f

        bl physics_dynseg_remove
        mov r0, #0
        ldr r1, [r4, #ACTRT_STATE]
        strh r0, [r1, #PLATST_LEFT]

4:      ldrh r0, [r1, #PLATST_RIGHT]
        cmp r0, #0
        beq 4f

        bl physics_dynseg_remove
        mov r0, #0
        ldr r1, [r4, #ACTRT_STATE]
        strh r0, [r1, #PLATST_RIGHT]

4:      ldrh r0, [r1, #PLATST_BOTTOM]
        cmp r0, #0
        beq 9f

        bl physics_dynseg_remove
        mov r0, #0
        ldr r1, [r4, #ACTRT_STATE]
        strh r0, [r1, #PLATST_BOTTOM]

9:      ldmfd sp!, {r4,pc}

@ Called for any actor who has our top segment as their floor.

<<ARM Routines in ROM>>= 
        .global platform_dynseg_update
platform_dynseg_update:
        ldrsh r2, [r0, #ACTRT_VY]
        ldrsh r3, [r1, #ACTRT_VY]
        add r2, r2, r3
        strh r2, [r1, #ACTRT_VY]

        bx lr
@ \section{Victims}

The collider for victims is quite simple.  If the sprite touching us is
not the hero, ignore the collision.  If it is, decrement the trigger
counter (unless it is already zero), and self-destruct, spawning a
rescue ephemeral and playing a fun sound effect.

<<ARM Routines in ROM>>= 
        .global victim_collider
victim_collider:
        stmfd sp!, {lr}
	ldr r2, =actor_sprite_lut
	ldrb r3, [r2, r1]
	cmp r3, #0xff
	beq 9f
        ldr r1, =hero_handle
        ldrb r1, [r1]
	cmp r3, r1
	bne 9f

        ldrb r0, [r2, r0]
        ldr r1, =actor_rt
        add r0, r1, r0, lsl #5

        ldr r1, =trigger_counter
        ldrb r2, [r1]
        cmp r2, #0
        subgt r2, r2, #1
        strgtb r2, [r1]

        stmfd sp!, {r0,r4}
	ldrb r2, [r0, #ACTRT_IDX]
        mov r4, #PAL_FIRE
	ldr r0, =rescue_spr
	ldr r1, =rescue_riser
	mov r3, #80                 @ 1.3 seconds
	bl ephemeral_spawn
	ldmfd sp!, {r0,r4}

	stmfd sp!, {r0}
	bl remove_parts
	ldmfd sp!, {r0}
	ldrb r0, [r0, #ACTRT_IDX]
	bl actor_remove

9:      ldmfd sp!, {pc}

@ Causes the rescue ephemeral to gently rise.

<<ARM Routines in ROM>>= 
rescue_riser:
        ldr r1, =sprite_rt
        add r1, r1, r0, lsl #4
        tst r2, #0b11
        ldreqb r3, [r1, #SPRT_Y]
        subeq r3, r3, #1
        streqb r3, [r1, #SPRT_Y]
        bx lr
@

% EOF primitive_ai.nws
