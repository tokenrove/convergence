% text -- layer based text routines for menus and debugging.
%
% Convergence
% Pureplay / 2002
% $Id: text.nws,v 1.3 2002/11/27 15:42:53 tek Exp $


<<Files to include>>= 
.include "gba.inc"
@

These two variables hold the addresses of locations in VRAM to place map
and tile data.

<<EWRAM Variables>>= 
mapptr: .skip 4
tileptr: .skip 4

@ Another important pair of variables is the pointer to the font
currently in use, and the current palette index to use.

<<EWRAM Variables>>= 
font: .skip 4
palette: .skip 1
.align
@


The [[text_init]] routine sets up the internal variables which tell the
other drawing functions where to place characters, et cetera.

<<ARM Routines in ROM>>= 
	.global text_init
text_init:
	stmfd sp!, {lr}
	ldr r2, =mapptr
	ldr r3, =vram_base
	add r3, r3, r0, lsl #11
	str r3, [r2]

	ldr r2, =tileptr
	ldr r3, =vram_base
	add r3, r3, r1, lsl #14
	str r3, [r2]

	ldmfd sp!, {lr}
	bx lr

@ The [[text_setfont]] routine has to set pointers to the current font,
and copy the font's tile data into VRAM.

<<ARM Routines in ROM>>= 
	.global text_setfont
text_setfont:
	stmfd sp!, {lr}
	ldr r1, =font
	ldr r2, [r0], #4
	str r0, [r1]
	add r0, r0, #256
	mov r1, r0
	ldr r0, =tileptr
	ldr r0, [r0]
	mov r2, r2, lsl #5
	bl dma_copy32
	ldmfd sp!, {lr}
	bx lr
@

<<ARM Routines in ROM>>= 
	.global text_setpalette
text_setpalette:
	cmp r0, #16
	movcs r0, #0
	ldr r1, =palette
	strb r0, [r1]
	bx lr

@ The [[text_puts]] routine prints NUL-terminated strings.

<<ARM Routines in ROM>>= 
	.global text_puts
text_puts:
	stmfd sp!, {r4}
	add r1, r1, r2, lsl #5
	ldr r2, =mapptr
	ldr r2, [r2]
	add r2, r2, r1, lsl #1
	ldr r3, =font
	ldr r3, [r3]

	ldr r1, =palette
	ldrb r1, [r1]

0:	ldrb r4, [r0], #1
	cmp r4, #0
	beq 9f

	ldrb r4, [r3, r4]
	orr r4, r4, r1, lsl #12
	strh r4, [r2], #2

	bal 0b

9:	ldmfd sp!, {r4}
	bx lr

@ The [[text_putd]] routine prints integers in decimal.

<<EWRAM Variables>>= 
buffer:	.skip 16
<<ARM Routines in ROM>>= 
	.global text_putd
text_putd:
	stmfd sp!, {r4-r6,lr}

	<<Render integer into buffer>>
	<<Reverse buffer>>

	ldr r0, =buffer
	bl text_puts

	ldmfd sp!, {r4-r6,lr}
	bx lr
@

<<Render integer into buffer>>= 
	ldr r5, =buffer
0:	ldr r4, =0x1999999A
	umull r3, r4, r0, r4
	@ r4 = r0 / 10

	add r3, r4, r4, lsl #2
	mov r3, r3, lsl #1
	@ r3 = r4 * 10

	sub r3, r0, r3
	@ r3 = r0 % 10
	cmp r3, #10
	moveq r3, #0
	addeq r4, r4, #1
	mov r0, r4
	mov r4, r3

	add r4, r4, #0x30
	strb r4, [r5], #1

	ldr r3, =buffer
	sub r3, r5, r3
	cmp r3, #10
	bgt 1f

	cmp r0, #0
	bgt 0b

1:	mov r4, #0
	strb r4, [r5], #1
@

<<Reverse buffer>>= 
	ldr r0, =buffer
	sub r5, r5, r0
	sub r5, r5, #2
	mov r4, #0
0:	ldrb r3, [r0, r4]
	ldrb r6, [r0, r5]
	strb r3, [r0, r5]
	strb r6, [r0, r4]
	add r4, r4, #1
	sub r5, r5, #1
	cmp r4, r5
	blt 0b

@ The [[text_wipe]] routine is just a convenience function to clear the
map.

<<ARM Routines in ROM>>= 
	.global text_wipe
text_wipe:
	ldr r0, =mapptr
	ldr r0, [r0]
	mov r1, #32*32
	mov r2, #0
0:	strh r2, [r0], #2
	subs r1, r1, #1
	bne 0b
	bx lr
@
